services:
  db:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_PASS} pg_isready -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 1m

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER}:${POSTGRES_PASS}@postgres:5432/mydatabase?sslmode=disable
    ports:
      - 9187:9187

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - db
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://127.0.0.1:80"
        ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 1m

  pg_backup:
    container_name: pg_backup
    image: ${PG_BACKUP_IMAGE_URI}
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - db
    restart: always

  datasette:
    container_name: datasette
    image: ${DATASETTE_IMAGE_URI}
    command:
      [
        "datasette",
        "-h",
        "0.0.0.0",
        "/mnt/dbs",
        "-m",
        "/mnt/metadata/metadata.yml"
      ]
    ports:
      - 8001:8001
    volumes:
      - /var/datasette/dbs:/mnt/dbs
      - ~/mnt/yaml/datasette:/mnt/metadata

  portainer:
    image: portainer/portainer-ce
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 9000:9000
      - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    healthcheck:
      test:
        [ "CMD-SHELL", "nc -z -w 2 http://127.0.0.1:9000 || exit 1" ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 1m

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus-data:/prometheus
      - ~/mnt/yaml/prometheus:/etc/prometheus/
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    healthcheck:
      test: [ "CMD-SHELL", "nc -z -w 2 http://127.0.0.1:9090 || exit 1" ]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 40s

  grafana:
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:3000" ]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  pgdata:
    driver: local
  pgadmin:
    driver: local
  portainer_data:
    driver: local
  grafana_data:
    driver: local
  prometheus-data:
    driver: local
